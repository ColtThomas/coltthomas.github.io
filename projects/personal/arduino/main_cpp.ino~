//analog pins to be used A4 (SDA), A5 (SCL)


#include <Wire.h>

#define CTRL_REG1 0x20
#define CTRL_REG2 0x21
#define CTRL_REG3 0x22
#define CTRL_REG4 0x23
#define CTRL_REG5 0x24
#define TEMP_OUT 0x26

int L3G4200D_Address = 105; //I2C address of the L3G4200D

int x;
int y;
int z;
int temp;

void setup()
{
  Wire.begin();
  Serial.begin(9600);

  Serial.println("starting up L3G4200D");
  setupL3G4200D(2000); // Configure L3G4200  - 250, 500 or 2000 deg/sec

  delay(100); //wait for the sensor to be ready 
}

void loop()
{
  Serial.print("gyro vlaues: ");
     getGyroValues();  // This will update x, y, and z with new values
  x = x * 200000/65536;
  Serial.print("X:");
  Serial.print(x);

y = y * 200000/65536;
  Serial.print(" Y:");
  Serial.print(y);
z = z * 200000/65536;
  Serial.print(" Z:");
  Serial.print(z);

  
temp = (int)readRegister(L3G4200D_Address, TEMP_OUT);
temp = temp * 9/5 + 32;   //this converts the temperature to degrees fahrenheit
  Serial.print("    Temperature reading: ");
  Serial.print(temp);
  Serial.println(" deg");
  
  delay(100); //Just here to slow down the serial to make it more readable
}

void getGyroValues(){

  
  
  byte xMSB = readRegister(L3G4200D_Address, 0x29);  //passing 41 this will request info from register 29 which has the x axis data.  The valie is expressed as two's complements
  byte xLSB = readRegister(L3G4200D_Address, 0x28);
  x = ((((unsigned int)xMSB) << 8) | ((unsigned int)xLSB)); // the multiplication converts the values to deg/sec

  byte yMSB = readRegister(L3G4200D_Address, 0x2B);
  byte yLSB = readRegister(L3G4200D_Address, 0x2A);
  y = ((((unsigned int)yMSB) << 8) | ((unsigned int)yLSB));

  byte zMSB = readRegister(L3G4200D_Address, 0x2D);
  byte zLSB = readRegister(L3G4200D_Address, 0x2C);
  z = ((((unsigned int)zMSB) << 8) | ((unsigned int)zLSB));
}


int setupL3G4200D(int scale){
  //From  Jim Lindblom of Sparkfun's code

  // Enable x, y, z and turn off power down:
  writeRegister(L3G4200D_Address, CTRL_REG1, 0b00001111);

  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
  writeRegister(L3G4200D_Address, CTRL_REG2, 0b00000000);
  //te last 2 bits are HPM1 HPM0 for ctr_REG2
  // Configure CTRL_REG3 to generate data ready interrupt on INT2
  // No interrupts used on INT1, if you'd like to configure INT1
  // or INT2 otherwise, consult the datasheet:
  writeRegister(L3G4200D_Address, CTRL_REG3, 0b00001000);

  // CTRL_REG4 controls the full-scale range, among other things:

  if(scale == 250){
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00000000);
  }else if(scale == 500){
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00010000);
  }else{
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00110000);
  }

  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  writeRegister(L3G4200D_Address, CTRL_REG5, 0b00000000);
}

void writeRegister(int deviceAddress, byte address, byte val) {
    Wire.beginTransmission(deviceAddress); // start transmission to device 
    Wire.write(address);       // send register address
    Wire.write(val);         // send value to write
    Wire.endTransmission();     // end transmission
}

int readRegister(int deviceAddress, byte address){

    int v;
    Wire.beginTransmission(deviceAddress);
    Wire.write(address); // register to read
    Wire.endTransmission();

    Wire.requestFrom(deviceAddress, 1); // read a byte

    while(!Wire.available()) {
        // waiting
    }

    v = Wire.read();
    return v;
}
